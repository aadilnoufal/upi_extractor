
# this aims to improve the code such that even non google pay transtaction works
###     VERSION 3.000
import os
import pytesseract
import cv2
import pandas as pd
import os  # Import the os module for file existence checks
no_of_txns_screenshots=int(input('enter number of screenshots in file'))

# Configure tesseract path 
pytesseract.pytesseract.tesseract_cmd = r'C:/Users/MEHAK-AADIL/AppData/Local/Programs/Tesseract-OCR/tesseract.exe'

# Get the rename folder path from the user
rename_folder_path = 'C:/Users/MEHAK-AADIL/Downloads/upi_txns/' 

list_of_numb=['1','2','3','4','5','6','8','9','0']


def rename_images(folder_path):
    """Renames all images in a folder to image1.jpeg, image2.jpeg, etc."""

    # Get a list of files in the folder
    files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
    num_files = len(files) 

    # Ask for confirmation 
    while True:
        user_input = input(f"Found {num_files} files. Is this correct? (y/n): ")
        if user_input.lower() == 'y':
            break
        elif user_input.lower() == 'n':
            print("Please check the folder and try again.")
            return
        else:
            print("Invalid input. Enter 'y' or 'n'.")

    # Rename files
    for i in range(num_files):
        old_filename = os.path.join(folder_path, files[i])  # Use files[i] here
        new_filename = os.path.join(folder_path, f"image{i+1}.jpeg")
        os.rename(old_filename, new_filename)


# Rename the images
rename_images(rename_folder_path)

print("Images renamed successfully!")





def split_first_letter(string):
  """Splits a string into a list where the first element is the first letter and the rest is joined.

  Args:
      string: The string to split.

  Returns:
      A list containing the first letter and the rest of the string joined.
  """

  if string:
    return string[1:]
  else:
    return []







def extract_upi_details(image_path):
    """Extracts UPI transaction details from an image."""
    try:
        # Load the image
        img = cv2.imread(image_path)

        # Check if image loaded successfully
        if img is None:
            print(f"Error loading image: {image_path}")
            print(f"Image exists: {os.path.exists(image_path)}")
            return None

        # Convert to grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Apply thresholding 
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]

        # Perform OCR
        text = pytesseract.image_to_string(thresh)

        # Extract details 
        details = {}
        lines = text.strip().split('\n')
        

        for i, line in enumerate(lines):
            print(line)
            print(type(line))
            print(len(line))
            # Improved amount extraction
            if '.' in line:
                details['amount'] = split_first_letter(line)
            elif 'Rs.' in line:
                details['amount'] = line.split('Rs.')[-1].strip()
            if 'Paid to' in line:
                details['paid_to'] = line.split('Paid to')[-1].strip()
            if 'ID:' in line and '@' not in line:
                details['transaction_id'] = line.split(': ')[-1].strip()
                print(line.split(': ')[-1].strip(),'+','here it is')
            #new code below yet to complete
            if 'ID:' in line and '@' not in line:
                details['transaction_id'] = line.split(': ')[-1].strip()
                for i in list_of_numb:
                   
                    if i not in line.split(': ')[-1].strip() :
                        details['transaction_id']=
                        break
                
            if 'Jan' in line or 'Feb' in line or 'Mar' in line or 'Apr' in line or 'May' in line or 'Jun' in line or 'Jul' in line or 'Aug' in line or 'Sept' in line or 'oct' in line or 'Nov' in line or 'Dec' in line: 
                details['date'] = line.strip()
            #if 'am' or "pm" in line.lower():
                #details['date'] = line.strip()
                

        return details

    except Exception as e:
        print(f"Error processing image {image_path}: {e}")
        return None

    
# Get a list of files in the folder
files = [f for f in os.listdir(rename_folder_path) if os.path.isfile(os.path.join(rename_folder_path, f))]
num_files = len(files) 
    
    
# Example usage:
image_folder = rename_folder_path
image_files = [] 
for i in range(1,num_files+1):
    i= str(i)
    image_files.append("image"+i+'.jpeg')




# Process each image and store details
all_details = []
for image_file in image_files:
    details = extract_upi_details(image_folder + image_file)
    if details:
        all_details.append(details)
        
        
        

# Create a Pandas DataFrame
df = pd.DataFrame(all_details)
print(df)


#CONVERT TO CSV FILE
df.to_csv('C:/Users/MEHAK-AADIL/Downloads/upi_txn.csv')
print()

